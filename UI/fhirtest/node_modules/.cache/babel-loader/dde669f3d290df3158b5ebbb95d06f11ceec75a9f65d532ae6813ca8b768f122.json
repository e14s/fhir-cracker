{"ast":null,"code":"import { ListSecretVersionIdsCommand } from \"../commands/ListSecretVersionIdsCommand\";\nimport { SecretsManagerClient } from \"../SecretsManagerClient\";\nconst makePagedClientRequest = async function (client, input) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return await client.send(new ListSecretVersionIdsCommand(input), ...args);\n};\nexport async function* paginateListSecretVersionIds(config, input) {\n  let token = config.startingToken || undefined;\n  let hasNext = true;\n  let page;\n  for (var _len2 = arguments.length, additionalArguments = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    additionalArguments[_key2 - 2] = arguments[_key2];\n  }\n  while (hasNext) {\n    input.NextToken = token;\n    input[\"MaxResults\"] = config.pageSize;\n    if (config.client instanceof SecretsManagerClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected SecretsManager | SecretsManagerClient\");\n    }\n    yield page;\n    const prevToken = token;\n    token = page.NextToken;\n    hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n  }\n  return undefined;\n}","map":{"version":3,"names":["ListSecretVersionIdsCommand","SecretsManagerClient","makePagedClientRequest","client","input","_len","arguments","length","args","Array","_key","send","paginateListSecretVersionIds","config","token","startingToken","undefined","hasNext","page","_len2","additionalArguments","_key2","NextToken","pageSize","Error","prevToken","stopOnSameToken"],"sources":["C:/temp/rodneytest/fhirtest/node_modules/@aws-sdk/client-secrets-manager/dist-es/pagination/ListSecretVersionIdsPaginator.js"],"sourcesContent":["import { ListSecretVersionIdsCommand, } from \"../commands/ListSecretVersionIdsCommand\";\nimport { SecretsManagerClient } from \"../SecretsManagerClient\";\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListSecretVersionIdsCommand(input), ...args);\n};\nexport async function* paginateListSecretVersionIds(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.NextToken = token;\n        input[\"MaxResults\"] = config.pageSize;\n        if (config.client instanceof SecretsManagerClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected SecretsManager | SecretsManagerClient\");\n        }\n        yield page;\n        const prevToken = token;\n        token = page.NextToken;\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n    }\n    return undefined;\n}\n"],"mappings":"AAAA,SAASA,2BAA2B,QAAS,yCAAyC;AACtF,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,MAAMC,sBAAsB,GAAG,eAAAA,CAAOC,MAAM,EAAEC,KAAK,EAAc;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACxD,OAAO,MAAMP,MAAM,CAACQ,IAAI,CAAC,IAAIX,2BAA2B,CAACI,KAAK,CAAC,EAAE,GAAGI,IAAI,CAAC;AAC7E,CAAC;AACD,OAAO,gBAAgBI,4BAA4BA,CAACC,MAAM,EAAET,KAAK,EAA0B;EACvF,IAAIU,KAAK,GAAGD,MAAM,CAACE,aAAa,IAAIC,SAAS;EAC7C,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,IAAI;EAAC,SAAAC,KAAA,GAAAb,SAAA,CAAAC,MAAA,EAHyDa,mBAAmB,OAAAX,KAAA,CAAAU,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;IAAnBD,mBAAmB,CAAAC,KAAA,QAAAf,SAAA,CAAAe,KAAA;EAAA;EAIrF,OAAOJ,OAAO,EAAE;IACZb,KAAK,CAACkB,SAAS,GAAGR,KAAK;IACvBV,KAAK,CAAC,YAAY,CAAC,GAAGS,MAAM,CAACU,QAAQ;IACrC,IAAIV,MAAM,CAACV,MAAM,YAAYF,oBAAoB,EAAE;MAC/CiB,IAAI,GAAG,MAAMhB,sBAAsB,CAACW,MAAM,CAACV,MAAM,EAAEC,KAAK,EAAE,GAAGgB,mBAAmB,CAAC;IACrF,CAAC,MACI;MACD,MAAM,IAAII,KAAK,CAAC,gEAAgE,CAAC;IACrF;IACA,MAAMN,IAAI;IACV,MAAMO,SAAS,GAAGX,KAAK;IACvBA,KAAK,GAAGI,IAAI,CAACI,SAAS;IACtBL,OAAO,GAAG,CAAC,EAAEH,KAAK,KAAK,CAACD,MAAM,CAACa,eAAe,IAAIZ,KAAK,KAAKW,SAAS,CAAC,CAAC;EAC3E;EACA,OAAOT,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}