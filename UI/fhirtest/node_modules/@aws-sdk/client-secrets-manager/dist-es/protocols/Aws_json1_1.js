import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, throwDefaultError, } from "@aws-sdk/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { DecryptionFailure, EncryptionFailure, InternalServiceError, InvalidNextTokenException, InvalidParameterException, InvalidRequestException, LimitExceededException, MalformedPolicyDocumentException, PreconditionNotMetException, PublicPolicyException, ResourceExistsException, ResourceNotFoundException, } from "../models/models_0";
import { SecretsManagerServiceException as __BaseException } from "../models/SecretsManagerServiceException";
export const se_CancelRotateSecretCommand = async (input, context) => {
    const headers = sharedHeaders("CancelRotateSecret");
    let body;
    body = JSON.stringify(se_CancelRotateSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecretCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecret");
    let body;
    body = JSON.stringify(se_CreateSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(se_DeleteResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecretCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecret");
    let body;
    body = JSON.stringify(se_DeleteSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSecretCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSecret");
    let body;
    body = JSON.stringify(se_DescribeSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRandomPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("GetRandomPassword");
    let body;
    body = JSON.stringify(se_GetRandomPasswordRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(se_GetResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSecretValueCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecretValue");
    let body;
    body = JSON.stringify(se_GetSecretValueRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSecretsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSecrets");
    let body;
    body = JSON.stringify(se_ListSecretsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSecretVersionIdsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSecretVersionIds");
    let body;
    body = JSON.stringify(se_ListSecretVersionIdsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(se_PutResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutSecretValueCommand = async (input, context) => {
    const headers = sharedHeaders("PutSecretValue");
    let body;
    body = JSON.stringify(se_PutSecretValueRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveRegionsFromReplicationCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveRegionsFromReplication");
    let body;
    body = JSON.stringify(se_RemoveRegionsFromReplicationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReplicateSecretToRegionsCommand = async (input, context) => {
    const headers = sharedHeaders("ReplicateSecretToRegions");
    let body;
    body = JSON.stringify(se_ReplicateSecretToRegionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreSecretCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreSecret");
    let body;
    body = JSON.stringify(se_RestoreSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RotateSecretCommand = async (input, context) => {
    const headers = sharedHeaders("RotateSecret");
    let body;
    body = JSON.stringify(se_RotateSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopReplicationToReplicaCommand = async (input, context) => {
    const headers = sharedHeaders("StopReplicationToReplica");
    let body;
    body = JSON.stringify(se_StopReplicationToReplicaRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(se_TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(se_UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecretCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSecret");
    let body;
    body = JSON.stringify(se_UpdateSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSecretVersionStageCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSecretVersionStage");
    let body;
    body = JSON.stringify(se_UpdateSecretVersionStageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ValidateResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("ValidateResourcePolicy");
    let body;
    body = JSON.stringify(se_ValidateResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CancelRotateSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CancelRotateSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelRotateSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_CancelRotateSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_CreateSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_CreateSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
            throw await de_DecryptionFailureRes(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
            throw await de_EncryptionFailureRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.secretsmanager#PreconditionNotMetException":
            throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
            throw await de_ResourceExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DeleteSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_DeleteSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_DescribeSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_DescribeSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetRandomPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRandomPasswordCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRandomPasswordResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_GetRandomPasswordCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_GetResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_GetSecretValueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetSecretValueCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecretValueResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_GetSecretValueCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
            throw await de_DecryptionFailureRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListSecretsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSecretsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSecretsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_ListSecretsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.secretsmanager#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ListSecretVersionIdsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSecretVersionIdsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSecretVersionIdsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_ListSecretVersionIdsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.secretsmanager#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PublicPolicyException":
        case "com.amazonaws.secretsmanager#PublicPolicyException":
            throw await de_PublicPolicyExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_PutSecretValueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutSecretValueCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutSecretValueResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_PutSecretValueCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
            throw await de_DecryptionFailureRes(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
            throw await de_EncryptionFailureRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
            throw await de_ResourceExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_RemoveRegionsFromReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveRegionsFromReplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RemoveRegionsFromReplicationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_RemoveRegionsFromReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ReplicateSecretToRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReplicateSecretToRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReplicateSecretToRegionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_ReplicateSecretToRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_RestoreSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestoreSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_RestoreSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_RotateSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RotateSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RotateSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_RotateSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_StopReplicationToReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopReplicationToReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopReplicationToReplicaResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_StopReplicationToReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSecretCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_UpdateSecretCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
            throw await de_DecryptionFailureRes(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
            throw await de_EncryptionFailureRes(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.secretsmanager#PreconditionNotMetException":
            throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
            throw await de_ResourceExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_UpdateSecretVersionStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateSecretVersionStageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecretVersionStageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_UpdateSecretVersionStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const de_ValidateResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ValidateResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ValidateResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const de_ValidateResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const de_DecryptionFailureRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_DecryptionFailure(body, context);
    const exception = new DecryptionFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EncryptionFailureRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_EncryptionFailure(body, context);
    const exception = new EncryptionFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InternalServiceError(body, context);
    const exception = new InternalServiceError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidNextTokenException(body, context);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterException(body, context);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRequestException(body, context);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body, context);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PreconditionNotMetExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PreconditionNotMetException(body, context);
    const exception = new PreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PublicPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PublicPolicyException(body, context);
    const exception = new PublicPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceExistsException(body, context);
    const exception = new ResourceExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AddReplicaRegionListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaRegionType(entry, context);
    });
};
const se_CancelRotateSecretRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_CreateSecretRequest = (input, context) => {
    return {
        ...(input.AddReplicaRegions != null && {
            AddReplicaRegions: se_AddReplicaRegionListType(input.AddReplicaRegions, context),
        }),
        ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.ForceOverwriteReplicaSecret != null && {
            ForceOverwriteReplicaSecret: input.ForceOverwriteReplicaSecret,
        }),
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) }),
        ...(input.SecretString != null && { SecretString: input.SecretString }),
        ...(input.Tags != null && { Tags: se_TagListType(input.Tags, context) }),
    };
};
const se_DeleteResourcePolicyRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_DeleteSecretRequest = (input, context) => {
    return {
        ...(input.ForceDeleteWithoutRecovery != null && { ForceDeleteWithoutRecovery: input.ForceDeleteWithoutRecovery }),
        ...(input.RecoveryWindowInDays != null && { RecoveryWindowInDays: input.RecoveryWindowInDays }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_DescribeSecretRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_Filter = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Values != null && { Values: se_FilterValuesStringList(input.Values, context) }),
    };
};
const se_FiltersListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Filter(entry, context);
    });
};
const se_FilterValuesStringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_GetRandomPasswordRequest = (input, context) => {
    return {
        ...(input.ExcludeCharacters != null && { ExcludeCharacters: input.ExcludeCharacters }),
        ...(input.ExcludeLowercase != null && { ExcludeLowercase: input.ExcludeLowercase }),
        ...(input.ExcludeNumbers != null && { ExcludeNumbers: input.ExcludeNumbers }),
        ...(input.ExcludePunctuation != null && { ExcludePunctuation: input.ExcludePunctuation }),
        ...(input.ExcludeUppercase != null && { ExcludeUppercase: input.ExcludeUppercase }),
        ...(input.IncludeSpace != null && { IncludeSpace: input.IncludeSpace }),
        ...(input.PasswordLength != null && { PasswordLength: input.PasswordLength }),
        ...(input.RequireEachIncludedType != null && { RequireEachIncludedType: input.RequireEachIncludedType }),
    };
};
const se_GetResourcePolicyRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_GetSecretValueRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.VersionId != null && { VersionId: input.VersionId }),
        ...(input.VersionStage != null && { VersionStage: input.VersionStage }),
    };
};
const se_ListSecretsRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_FiltersListType(input.Filters, context) }),
        ...(input.IncludePlannedDeletion != null && { IncludePlannedDeletion: input.IncludePlannedDeletion }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortOrder != null && { SortOrder: input.SortOrder }),
    };
};
const se_ListSecretVersionIdsRequest = (input, context) => {
    return {
        ...(input.IncludeDeprecated != null && { IncludeDeprecated: input.IncludeDeprecated }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_PutResourcePolicyRequest = (input, context) => {
    return {
        ...(input.BlockPublicPolicy != null && { BlockPublicPolicy: input.BlockPublicPolicy }),
        ...(input.ResourcePolicy != null && { ResourcePolicy: input.ResourcePolicy }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_PutSecretValueRequest = (input, context) => {
    return {
        ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
        ...(input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.SecretString != null && { SecretString: input.SecretString }),
        ...(input.VersionStages != null && { VersionStages: se_SecretVersionStagesType(input.VersionStages, context) }),
    };
};
const se_RemoveRegionsFromReplicationRequest = (input, context) => {
    return {
        ...(input.RemoveReplicaRegions != null && {
            RemoveReplicaRegions: se_RemoveReplicaRegionListType(input.RemoveReplicaRegions, context),
        }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_RemoveReplicaRegionListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ReplicaRegionType = (input, context) => {
    return {
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.Region != null && { Region: input.Region }),
    };
};
const se_ReplicateSecretToRegionsRequest = (input, context) => {
    return {
        ...(input.AddReplicaRegions != null && {
            AddReplicaRegions: se_AddReplicaRegionListType(input.AddReplicaRegions, context),
        }),
        ...(input.ForceOverwriteReplicaSecret != null && {
            ForceOverwriteReplicaSecret: input.ForceOverwriteReplicaSecret,
        }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_RestoreSecretRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_RotateSecretRequest = (input, context) => {
    return {
        ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
        ...(input.RotateImmediately != null && { RotateImmediately: input.RotateImmediately }),
        ...(input.RotationLambdaARN != null && { RotationLambdaARN: input.RotationLambdaARN }),
        ...(input.RotationRules != null && { RotationRules: se_RotationRulesType(input.RotationRules, context) }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_RotationRulesType = (input, context) => {
    return {
        ...(input.AutomaticallyAfterDays != null && { AutomaticallyAfterDays: input.AutomaticallyAfterDays }),
        ...(input.Duration != null && { Duration: input.Duration }),
        ...(input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression }),
    };
};
const se_SecretVersionStagesType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_StopReplicationToReplicaRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const se_Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const se_TagKeyListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TagListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_TagResourceRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.Tags != null && { Tags: se_TagListType(input.Tags, context) }),
    };
};
const se_UntagResourceRequest = (input, context) => {
    return {
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.TagKeys != null && { TagKeys: se_TagKeyListType(input.TagKeys, context) }),
    };
};
const se_UpdateSecretRequest = (input, context) => {
    return {
        ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
        ...(input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.SecretString != null && { SecretString: input.SecretString }),
    };
};
const se_UpdateSecretVersionStageRequest = (input, context) => {
    return {
        ...(input.MoveToVersionId != null && { MoveToVersionId: input.MoveToVersionId }),
        ...(input.RemoveFromVersionId != null && { RemoveFromVersionId: input.RemoveFromVersionId }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
        ...(input.VersionStage != null && { VersionStage: input.VersionStage }),
    };
};
const se_ValidateResourcePolicyRequest = (input, context) => {
    return {
        ...(input.ResourcePolicy != null && { ResourcePolicy: input.ResourcePolicy }),
        ...(input.SecretId != null && { SecretId: input.SecretId }),
    };
};
const de_CancelRotateSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        VersionId: __expectString(output.VersionId),
    };
};
const de_CreateSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        ReplicationStatus: output.ReplicationStatus != null ? de_ReplicationStatusListType(output.ReplicationStatus, context) : undefined,
        VersionId: __expectString(output.VersionId),
    };
};
const de_DecryptionFailure = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_DeleteResourcePolicyResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
    };
};
const de_DeleteSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        DeletionDate: output.DeletionDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.DeletionDate)))
            : undefined,
        Name: __expectString(output.Name),
    };
};
const de_DescribeSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        CreatedDate: output.CreatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedDate)))
            : undefined,
        DeletedDate: output.DeletedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.DeletedDate)))
            : undefined,
        Description: __expectString(output.Description),
        KmsKeyId: __expectString(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastAccessedDate)))
            : undefined,
        LastChangedDate: output.LastChangedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastChangedDate)))
            : undefined,
        LastRotatedDate: output.LastRotatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastRotatedDate)))
            : undefined,
        Name: __expectString(output.Name),
        NextRotationDate: output.NextRotationDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.NextRotationDate)))
            : undefined,
        OwningService: __expectString(output.OwningService),
        PrimaryRegion: __expectString(output.PrimaryRegion),
        ReplicationStatus: output.ReplicationStatus != null ? de_ReplicationStatusListType(output.ReplicationStatus, context) : undefined,
        RotationEnabled: __expectBoolean(output.RotationEnabled),
        RotationLambdaARN: __expectString(output.RotationLambdaARN),
        RotationRules: output.RotationRules != null ? de_RotationRulesType(output.RotationRules, context) : undefined,
        Tags: output.Tags != null ? de_TagListType(output.Tags, context) : undefined,
        VersionIdsToStages: output.VersionIdsToStages != null
            ? de_SecretVersionsToStagesMapType(output.VersionIdsToStages, context)
            : undefined,
    };
};
const de_EncryptionFailure = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_GetRandomPasswordResponse = (output, context) => {
    return {
        RandomPassword: __expectString(output.RandomPassword),
    };
};
const de_GetResourcePolicyResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        ResourcePolicy: __expectString(output.ResourcePolicy),
    };
};
const de_GetSecretValueResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        CreatedDate: output.CreatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedDate)))
            : undefined,
        Name: __expectString(output.Name),
        SecretBinary: output.SecretBinary != null ? context.base64Decoder(output.SecretBinary) : undefined,
        SecretString: __expectString(output.SecretString),
        VersionId: __expectString(output.VersionId),
        VersionStages: output.VersionStages != null ? de_SecretVersionStagesType(output.VersionStages, context) : undefined,
    };
};
const de_InternalServiceError = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_InvalidNextTokenException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_InvalidParameterException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_InvalidRequestException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_KmsKeyIdListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_LimitExceededException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_ListSecretsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SecretList: output.SecretList != null ? de_SecretListType(output.SecretList, context) : undefined,
    };
};
const de_ListSecretVersionIdsResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        NextToken: __expectString(output.NextToken),
        Versions: output.Versions != null ? de_SecretVersionsListType(output.Versions, context) : undefined,
    };
};
const de_MalformedPolicyDocumentException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_PreconditionNotMetException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_PublicPolicyException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_PutResourcePolicyResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
    };
};
const de_PutSecretValueResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        VersionId: __expectString(output.VersionId),
        VersionStages: output.VersionStages != null ? de_SecretVersionStagesType(output.VersionStages, context) : undefined,
    };
};
const de_RemoveRegionsFromReplicationResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        ReplicationStatus: output.ReplicationStatus != null ? de_ReplicationStatusListType(output.ReplicationStatus, context) : undefined,
    };
};
const de_ReplicateSecretToRegionsResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        ReplicationStatus: output.ReplicationStatus != null ? de_ReplicationStatusListType(output.ReplicationStatus, context) : undefined,
    };
};
const de_ReplicationStatusListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ReplicationStatusType(entry, context);
    });
    return retVal;
};
const de_ReplicationStatusType = (output, context) => {
    return {
        KmsKeyId: __expectString(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastAccessedDate)))
            : undefined,
        Region: __expectString(output.Region),
        Status: __expectString(output.Status),
        StatusMessage: __expectString(output.StatusMessage),
    };
};
const de_ResourceExistsException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_ResourceNotFoundException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const de_RestoreSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
    };
};
const de_RotateSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        VersionId: __expectString(output.VersionId),
    };
};
const de_RotationRulesType = (output, context) => {
    return {
        AutomaticallyAfterDays: __expectLong(output.AutomaticallyAfterDays),
        Duration: __expectString(output.Duration),
        ScheduleExpression: __expectString(output.ScheduleExpression),
    };
};
const de_SecretListEntry = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        CreatedDate: output.CreatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedDate)))
            : undefined,
        DeletedDate: output.DeletedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.DeletedDate)))
            : undefined,
        Description: __expectString(output.Description),
        KmsKeyId: __expectString(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastAccessedDate)))
            : undefined,
        LastChangedDate: output.LastChangedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastChangedDate)))
            : undefined,
        LastRotatedDate: output.LastRotatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastRotatedDate)))
            : undefined,
        Name: __expectString(output.Name),
        NextRotationDate: output.NextRotationDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.NextRotationDate)))
            : undefined,
        OwningService: __expectString(output.OwningService),
        PrimaryRegion: __expectString(output.PrimaryRegion),
        RotationEnabled: __expectBoolean(output.RotationEnabled),
        RotationLambdaARN: __expectString(output.RotationLambdaARN),
        RotationRules: output.RotationRules != null ? de_RotationRulesType(output.RotationRules, context) : undefined,
        SecretVersionsToStages: output.SecretVersionsToStages != null
            ? de_SecretVersionsToStagesMapType(output.SecretVersionsToStages, context)
            : undefined,
        Tags: output.Tags != null ? de_TagListType(output.Tags, context) : undefined,
    };
};
const de_SecretListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SecretListEntry(entry, context);
    });
    return retVal;
};
const de_SecretVersionsListEntry = (output, context) => {
    return {
        CreatedDate: output.CreatedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedDate)))
            : undefined,
        KmsKeyIds: output.KmsKeyIds != null ? de_KmsKeyIdListType(output.KmsKeyIds, context) : undefined,
        LastAccessedDate: output.LastAccessedDate != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastAccessedDate)))
            : undefined,
        VersionId: __expectString(output.VersionId),
        VersionStages: output.VersionStages != null ? de_SecretVersionStagesType(output.VersionStages, context) : undefined,
    };
};
const de_SecretVersionsListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SecretVersionsListEntry(entry, context);
    });
    return retVal;
};
const de_SecretVersionStagesType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_SecretVersionsToStagesMapType = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_SecretVersionStagesType(value, context);
        return acc;
    }, {});
};
const de_StopReplicationToReplicaResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
    };
};
const de_Tag = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
const de_TagListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Tag(entry, context);
    });
    return retVal;
};
const de_UpdateSecretResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
        VersionId: __expectString(output.VersionId),
    };
};
const de_UpdateSecretVersionStageResponse = (output, context) => {
    return {
        ARN: __expectString(output.ARN),
        Name: __expectString(output.Name),
    };
};
const de_ValidateResourcePolicyResponse = (output, context) => {
    return {
        PolicyValidationPassed: __expectBoolean(output.PolicyValidationPassed),
        ValidationErrors: output.ValidationErrors != null ? de_ValidationErrorsType(output.ValidationErrors, context) : undefined,
    };
};
const de_ValidationErrorsEntry = (output, context) => {
    return {
        CheckName: __expectString(output.CheckName),
        ErrorMessage: __expectString(output.ErrorMessage),
    };
};
const de_ValidationErrorsType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ValidationErrorsEntry(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `secretsmanager.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
